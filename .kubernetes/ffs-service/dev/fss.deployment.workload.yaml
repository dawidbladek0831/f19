apiVersion: apps/v1
kind: Deployment
metadata:
  name: file-storage-service
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: file-storage-service
  template:
    metadata:
      labels:
        app: file-storage-service
    spec:
      containers:
        - name: file-storage-service
          image: ghcr.io/dawidbladek0831/file-storage-service:0.4.0
          ports:
            - containerPort: 8080
          env:
            - name: APPLICATION_STORAGE_LOCAL_PATH
              value: fileStorageDirName
            - name: SERVER_PORT
              value: "8080"
            - name: SPRING_APPLICATION_NAME
              value: file-storage-service

            # Keycloak (załóżmy, że service to 'auth-keycloak' na porcie 8080)
            - name: OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI
              value: http://localhost:8080/realms/f19
            - name: OAUTH2_RESOURCE_SERVER_JWT_JWK_SET_URI
              value: http://keycloak.dev.svc.cluster.local:8080/realms/f19/protocol/openid-connect/certs

            # MongoDB
            - name: MONGODB_HOST
              value: headless-mongo.dev.svc.cluster.local
            - name: MONGODB_PORT
              value: "27017"
            - name: MONGODB_USERNAME
              value: root
            - name: MONGODB_PASSWORD
              value: password
            - name: MONGODB_DATABASE
              value: file_storage_service
            - name: MONGODB_AUTHENTICATION_DATABASE
              value: admin

            # Kafka
            - name: KAFKA_BOOTSTRAP_SERVER
              value: headless-kafka.dev.svc.cluster.local:9092
            - name: KAFKA_PRODUCER_CLIENT_ID
              value: spring-boot-app-fss-producer
            - name: KAFKA_CONSUMER_CLIENT_ID
              value: spring-boot-app-fss-consumer
            - name: KAFKA_CONSUMER_GROUP_ID
              value: spring-boot-app-fss-consumer-group-id