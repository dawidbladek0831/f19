apiVersion: v1
kind: Service
metadata:
  name: keycloak-headless-service
  namespace: dev
  labels:
    app: keycloak
spec:
  clusterIP: None # This makes it a Headless Service [25]
  selector:
    app: keycloak
  ports:
    - protocol: TCP
      port: 7600 # JGroups port for cluster communication
      targetPort: 7600
      name: jgroups

---

apiVersion: apps/v1
kind: StatefulSet # Changed from Deployment to StatefulSet [23, 24]
metadata:
  name: keycloak
  namespace: dev
  labels:
    app: keycloak
spec:
  serviceName: keycloak-headless-service # Links to the Headless Service for stable network identities [25]
  replicas: 1 # For High Availability [7, 8]
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      securityContext:
        runAsNonRoot: true # Enforce running as non-root [8]
        runAsUser: 1000 # Example non-root user ID (Keycloak's default is often 1000)
        fsGroup: 1000 # Ensures volume mounts have correct group ownership
      containers:
      - name: keycloak
        image: quay.io/keycloak/keycloak:latest # Official Keycloak Docker image [22]
        args: ["start"] # Run Keycloak in production mode [20]
        env:
        - name: KC_DB
          value: postgres
        - name: KC_DB_USERNAME
          value: postgres
        - name: KC_DB_PASSWORD
          value: postgres
        - name: KC_DB_URL_DATABASE
          value: keycloak
        - name: KC_DB_URL_HOST
          value: "auth-db-service.dev.svc.cluster.local" # Replace with your PostgreSQL service name
        - name: KC_DB_URL_PORT
          value: "5432"

        - name: KC_HOSTNAME
          value: "https://auth.dev.dawidbladek0831.org" # User's requested hostname [20]
        - name: KC_HOSTNAME_STRICT
          value: "true" # Enforce strict hostname validation [21]
        - name: KC_HOSTNAME_STRICT_HTTPS
          value: "true" # Enforce strict HTTPS scheme validation [21]

        - name: KC_PROXY_HEADERS
          value: "xforwarded" # Or "forwarded", depending on your Gateway [20]
        - name: KC_HTTP_ENABLED
          value: "true" # Keycloak expects HTTP from the proxy, HTTPS is terminated at Gateway

        - name: KC_HTTP_PORT
          value: "8080" # Default HTTP port for Keycloak

        - name: KC_METRICS_ENABLED
          value: "true" # Enable built-in metrics for observability [17]
        - name: KC_HEALTH_ENABLED
          value: "true"
        - name: KC_HTTP_MANAGEMENT_PORT
          value: "9000"

        - name: KC_CACHE
          value: "ispn" # Enable Infinispan distributed caching [10]
        - name: KC_CACHE_STACK
          value: "kubernetes" # Use Kubernetes-native discovery for clustering [11]
        - name: JAVA_OPTS_APPEND
          value: "-Djgroups.dns.query=keycloak-headless-service.dev.svc.cluster.local" # Crucial for K8s cluster discovery, points to Headless Service [11, 25, 26]
        
        - name: KC_BOOTSTRAP_ADMIN_USERNAME
          value: "keycloakadmin" # Initial admin username (change post-deployment) [15]
        - name: KC_BOOTSTRAP_ADMIN_PASSWORD
          value: "password" # Initial admin password (change post-deployment) [15]
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 8443 # Keycloak's default HTTPS port, even if proxy terminates
        - name: jgroups
          containerPort: 7600 # Port for Infinispan cluster communication
        - name: management
          containerPort: 9000
        startupProbe:
          httpGet:
            path: /health/started
            port: management
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 12
        readinessProbe:
          httpGet:
            path: /health/ready
            port: management
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 12
        livenessProbe:
          httpGet:
            path: /health/live
            port: management
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 12

        volumeMounts:
        - name: keycloak-tmp
          mountPath: /tmp # Temporary storage for Keycloak
        # If custom themes/extensions are used and not baked into the image,
        # a PersistentVolumeClaim (PVC) should be mounted here using volumeClaimTemplates.
        # For example:
        # - name: keycloak-themes
        #   mountPath: /opt/keycloak/themes
        #   readOnly: true # If themes are static
      volumes:
      - name: keycloak-tmp
        emptyDir: {} # Ephemeral emptyDir for temporary files
      # If custom themes/extensions are used and not baked into the image,
      # volumeClaimTemplates should be defined at the StatefulSet spec level. For example:
      # volumeClaimTemplates:
      # - metadata:
      #     name: keycloak-themes
      #   spec:
      #     accessModes:
      #     storageClassName: "your-storage-class" # Define your storage class
      #     resources:
      #       requests:
      #         storage: 1Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: keycloak
              topologyKey: "kubernetes.io/hostname" # Spreads Pods across different nodes [8]

---

apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: dev
  labels:
    app: keycloak
spec:
  selector:
    app: keycloak
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 8080 
      targetPort: 8080
      name: http
    - protocol: TCP
      port: 8443
      targetPort: 8443
      name: https
    - protocol: TCP
      port: 9000
      targetPort: 9000
      name: management

---

apiVersion: networking.gke.io/v1
kind: HealthCheckPolicy
metadata:
  name: keycloak-healthcheck-policy
  namespace: dev
spec:
  default:
    config:
      type: HTTP 
      httpHealthCheck:
        portSpecification: USE_FIXED_PORT
        port: 9000
        requestPath: /health/ready 
        proxyHeader: NONE
  targetRef:
    group: "" 
    kind: Service
    name: auth-service 
