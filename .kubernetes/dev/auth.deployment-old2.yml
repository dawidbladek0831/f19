apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: dev
  labels:
    app: keycloak
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
  selector:
    app: keycloak
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak-discovery
  namespace: dev
  labels:
    app: keycloak
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: keycloak
  publishNotReadyAddresses: true
---
apiVersion: apps/v1
# Use a stateful setup to ensure that for a rolling update Pods are restarted with a rolling strategy one-by-one.
# This prevents losing in-memory information stored redundantly in two Pods.
kind: StatefulSet
metadata:
  name: keycloak
  namespace: dev
  labels:
    app: keycloak
  annotations:
    networking.gke.io/proven-destination: "false"
    networking.gke.io/healthcheck: |
      {
        "requestPath": "/health/ready",
        "port": 9000
      }
spec:
  serviceName: keycloak-discovery
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
        - name: keycloak
          image: quay.io/keycloak/keycloak:26.1
          args: ["start"]
          env:
            - name: KC_BOOTSTRAP_ADMIN_USERNAME
              value: "root"
            - name: KC_BOOTSTRAP_ADMIN_PASSWORD
              value: "password"
            # In a production environment, add a TLS certificate to Keycloak to either end-to-end encrypt the traffic between
            # the client or Keycloak, or to encrypt the traffic between your proxy and Keycloak.
            # Respect the proxy headers forwarded by the reverse proxy
            # In a production environment, verify which proxy type you are using, and restrict access to Keycloak
            # from other sources than your proxy if you continue to use proxy headers.
            - name: KC_PROXY_HEADERS
              value: "xforwarded"
            - name: KC_HTTP_ENABLED
              value: "true"
            - name: KC_PROXY
              value: "edge"
            # In this explorative setup, no strict hostname is set.
            # For production environments, set a hostname for a secure setup.
            - name: KC_HOSTNAME
              value: "auth.dev.dawidbladek0831.org"
            - name: KC_HOSTNAME_STRICT
              value: "true"
            - name: KC_HEALTH_ENABLED
              value: "true"
            - name: "KC_CACHE"
              value: "ispn"
            # Use the Kubernetes configuration for distributed caches which is based on DNS
            - name: "KC_CACHE_STACK"
              value: "kubernetes"
            # Passing the Pod's IP primary address to the JGroups clustering as this is required in IPv6 only setups
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            # Instruct JGroups which DNS hostname to use to discover other Keycloak nodes
            # Needs to be unique for each Keycloak cluster
            - name: JAVA_OPTS_APPEND
              value: '-Djgroups.dns.query="keycloak-discovery" -Djgroups.bind.address=$(POD_IP)'
            - name: "KC_DB_URL_DATABASE"
              value: "keycloak"
            - name: "KC_DB_URL_HOST"
              value: "auth-db-service"
            - name: "KC_DB"
              value: "postgres"
            # In a production environment, use a secret to store username and password to the database
            - name: "KC_DB_PASSWORD"
              value: "postgres"
            - name: "KC_DB_USERNAME"
              value: "postgres"
          ports:
            - name: http
              containerPort: 8080
          startupProbe:
            httpGet:
              path: /health/started
              port: 9000
            initialDelaySeconds: 60
            periodSeconds: 30
            failureThreshold: 12
          # readinessProbe:
          #   httpGet:
          #     path: /health/ready
          #     port: 9000
          #   initialDelaySeconds: 60
          #   periodSeconds: 30
          #   failureThreshold: 12
          # livenessProbe:
          #   httpGet:
          #     path: /health/live
          #     port: 9000
          #   initialDelaySeconds: 60
          #   periodSeconds: 30
          #   failureThreshold: 12
